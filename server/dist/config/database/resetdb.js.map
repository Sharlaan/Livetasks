{"version":3,"sources":["../../../src/config/database/resetdb.js"],"names":["database","dbname","configParams","start","property","name","message","validator","warning","default","get","error","yesno","test","console","log","process","exit","resetdb","then","catch"],"mappings":";;AAAA;;AACA;;;;AACA;;;;;;AAEA,MAAM,EAAEA,UAAUC,MAAZ,uBAAN;AAAA,MAA6BC,YAA7B;AACA,iBAAOC,KAAP;;AAEA,MAAMC,WAAW;AACfC,QAAM,OADS;AAEfC,WAAU,mCAAkCL,MAAO,QAAOA,MAAO,SAFlD;AAGfM,aAAW,cAHI;AAIfC,WAAS,4BAJM;AAKfC,WAAS;AALM,CAAjB;;AAQA,iBAAOC,GAAP,CAAWN,QAAX,EAAqB,CAACO,KAAD,EAAQ,EAACC,KAAD,EAAR,KAAoB;AACvC,MAAID,SAAS,UAAUE,IAAV,CAAeD,KAAf,CAAb,EAAoC;AAClCE,YAAQC,GAAR,CAAY,gBAAZ;AACAC,YAAQC,IAAR,CAAa,CAAC,CAAd;AACD;AACD,MAAI,WAAWJ,IAAX,CAAgBD,KAAhB,CAAJ,EAA4B,OAAOM,QAAQhB,YAAR,EAAsBD,MAAtB,CAAP;AAC7B,CAND;;AAQA,SAASiB,OAAT,CAAkBhB,YAAlB,EAAgCD,MAAhC,EAAwC;AACtC,uBAAOC,YAAP,EAAqBD,MAArB,EACGkB,IADH,CACQ,MAAML,QAAQC,GAAR,CAAa,MAAKd,MAAO,wBAAzB,CADd,EAEGmB,KAFH,CAEST,SAASG,QAAQH,KAAR,CACb,qBAAoBV,MAAO;QAC1BU,KAAM,EAFM;AAIpB;;;;;;;AANE;AAaD;;AAED","file":"resetdb.js","sourcesContent":["import { dropdb } from 'pgtools'\r\nimport prompt from 'prompt'\r\nimport { database } from '../settings'\r\n\r\nconst { database: dbname, ...configParams } = database\r\nprompt.start()\r\n\r\nconst property = {\r\n  name: 'yesno',\r\n  message: `Are you sure to reset databases ${dbname} and ${dbname}_test ?`,\r\n  validator: /y[es]*|n[o]?/,\r\n  warning: 'Must respond yes|y or no|n',\r\n  default: 'no'\r\n}\r\n\r\nprompt.get(property, (error, {yesno}) => {\r\n  if (error || /^n|no$/i.test(yesno)) {\r\n    console.log('Canceled reset')\r\n    process.exit(-1)\r\n  }\r\n  if (/^y|yes$/i.test(yesno)) return resetdb(configParams, dbname)\r\n})\r\n\r\nfunction resetdb (configParams, dbname) {\r\n  dropdb(configParams, dbname)\r\n    .then(() => console.log(`DB ${dbname} successfully dropped.`))\r\n    .catch(error => console.error(\r\n      `Error dropping db ${dbname}!\r\n      ${error}`\r\n    ))\r\n/*  dropdb(configParams, `${dbname}_test`)\r\n    .then(() => console.log(`DB ${dbname}_test successfully dropped.`))\r\n    .catch(error => console.error(\r\n      `Error dropping db ${dbname}_test!\r\n      ${error}`\r\n    ))\r\n    */\r\n}\r\n\r\n/*\r\nSQL equivalent:\r\n\r\n -- Making sure the database exists\r\n SELECT * from pg_database where datname = 'my_database_name';\r\n\r\n -- Disallow new connections\r\n UPDATE pg_database SET datallowconn = 'false' WHERE datname = 'my_database_name';\r\n ALTER DATABASE my_database_name CONNECTION LIMIT 1;\r\n\r\n -- Terminate existing connections\r\n SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = 'my_database_name';\r\n\r\n -- Drop database\r\n DROP DATABASE my_database_name;\r\n */\r\n"]}