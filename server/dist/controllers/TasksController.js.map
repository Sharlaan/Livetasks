{"version":3,"sources":["../../src/controllers/TasksController.js"],"names":["TASK_ALL_SUCCESS","TASK_ALL_ERROR","TASK_CREATE_INVALID_PARAM","TASK_CREATE_SUCCESS","TASK_CREATE_ERROR","TASK_UPDATE_INVALID_PARAM","TASK_UPDATE_SUCCESS","TASK_UPDATE_ERROR","TASK_REMOVE_INVALID_PARAM","TASK_REMOVE_SUCCESS","TASK_REMOVE_ERROR","all","data","response","getAll","status","message","error","console","log","create","groupId","content","JSON","parse","test","newTask","broadcast","emit","update","id","finished","updatedTask","remove"],"mappings":"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","file":"TasksController.js","sourcesContent":["/* eslint-disable standard/no-callback-literal */\r\nimport Task from '../models/Task'\r\nimport { tasks as tasksMessages } from '../config/translations'\r\n\r\nconst {\r\n  TASK_ALL_SUCCESS,\r\n  TASK_ALL_ERROR,\r\n  TASK_CREATE_INVALID_PARAM,\r\n  TASK_CREATE_SUCCESS,\r\n  TASK_CREATE_ERROR,\r\n  TASK_UPDATE_INVALID_PARAM,\r\n  TASK_UPDATE_SUCCESS,\r\n  TASK_UPDATE_ERROR,\r\n  TASK_REMOVE_INVALID_PARAM,\r\n  TASK_REMOVE_SUCCESS,\r\n  TASK_REMOVE_ERROR\r\n} = tasksMessages\r\n\r\nexport default {\r\n  /**\r\n   * Retrieve all tasks\r\n   * @param {null} data - received from client\r\n   * @param {function} response - callback function used by client\r\n   * which will receive the server data\r\n   * @return {json} response\r\n   */\r\n  async all (data, response) {\r\n    try {\r\n      const data = await Task.getAll()\r\n      response({\r\n        status: 'success',\r\n        data,\r\n        message: TASK_ALL_SUCCESS\r\n      })\r\n    } catch (error) {\r\n      console.log('Error @ TasksController.all:\\n', error)\r\n      response({\r\n        status: 'failed',\r\n        message: TASK_ALL_ERROR\r\n      })\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Create a new task\r\n   * @param {string} data - stringified object from client\r\n   * @param {number} data.groupId - newTask's group ID\r\n   * @param {string} data.content - newTask's content\r\n   * @param {function} response - callback function used by client\r\n   * which will receive the server data\r\n   * @return {json} response\r\n   */\r\n  async create (data, response) {\r\n    const {groupId, content} = JSON.parse(data)\r\n    if (!/^\\d+$/.test(groupId) || typeof content !== 'string') {\r\n      return response({\r\n        status: 'failed',\r\n        message: TASK_CREATE_INVALID_PARAM\r\n      })\r\n    }\r\n    try {\r\n      const newTask = await Task.create(groupId, content)\r\n      if (newTask) {\r\n        // Notify other clients\r\n        this.broadcast.emit('onTaskCreated', newTask)\r\n        // respond to client\r\n        response({\r\n          status: 'success',\r\n          data: newTask,\r\n          message: TASK_CREATE_SUCCESS\r\n        })\r\n      }\r\n    } catch (error) {\r\n      console.log('Error @ TasksController.create:\\n', error)\r\n      response({\r\n        status: 'failed',\r\n        message: TASK_CREATE_ERROR\r\n      })\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Update a specified task\r\n   * @param {string} data - stringified object from client\r\n   * @param {number} data.id - task ID\r\n   * @param {string} data.content - Task content\r\n   * @param {boolean} data.finished - Task status\r\n   * @param {function} response - callback function used by client\r\n   * which will receive the server data\r\n   * @return {json} response\r\n   */\r\n  async update (data, response) {\r\n    const { id, content, finished } = JSON.parse(data)\r\n    if (!/^\\d+$/.test(id) ||\r\n      typeof content !== 'string' ||\r\n      typeof finished !== 'boolean'\r\n    ) {\r\n      return response({\r\n        status: 'failed',\r\n        message: TASK_UPDATE_INVALID_PARAM\r\n      })\r\n    }\r\n    try {\r\n      const updatedTask = await Task.update(+id, content, finished)\r\n      // Notify other clients\r\n      this.broadcast.emit('onTaskUpdated', updatedTask)\r\n      // respond to client\r\n      response({\r\n        status: 'success',\r\n        data: updatedTask,\r\n        message: TASK_UPDATE_SUCCESS\r\n      })\r\n    } catch (error) {\r\n      console.log('Error @ TasksController.update:\\n', error)\r\n      response({\r\n        status: 'failed',\r\n        message: TASK_UPDATE_ERROR\r\n      })\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Remove the specified task\r\n   * @param {string} data - stringified object from client\r\n   * @param {number} data.id - Task ID\r\n   * @param {function} response - callback function used by client\r\n   * which will receive the server data\r\n   * @return {json} response\r\n   */\r\n  async remove (data, response) {\r\n    const { groupId, id } = JSON.parse(data)\r\n    if (!/^\\d+$/.test(id) || !/^\\d+$/.test(id)) {\r\n      return response({\r\n        status: 'failed',\r\n        message: TASK_REMOVE_INVALID_PARAM\r\n      })\r\n    }\r\n    try {\r\n      await Task.remove(id)\r\n      // Notify other clients\r\n      this.broadcast.emit('onTaskRemoved', { groupId, id })\r\n      // respond to client\r\n      response({\r\n        status: 'success',\r\n        message: TASK_REMOVE_SUCCESS\r\n      })\r\n    } catch (error) {\r\n      console.log('Error @ TasksController.remove:\\n', error)\r\n      response({\r\n        status: 'failed',\r\n        message: TASK_REMOVE_ERROR\r\n      })\r\n    }\r\n  }\r\n}\r\n"]}