{"version":3,"sources":["../../src/models/Task.test.js"],"names":["before","t","expectedCount","one","c","count","data","getAll","true","length","error","console","expected","get","id","content","tag","newID","create","then","addedTask","firstTask","updatedTask","update","finishde_at","finished_at","allTasks","lastID","lastTask","remove","false","deleted_at"],"mappings":"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","file":"Task.test.js","sourcesContent":["import test from 'ava'\r\nimport db from '../config/database/database'\r\nimport Task from './Task'\r\nimport '../config/database/migrate'\r\n\r\ntest.before(() => {\r\n  // TODO: prepare testdb and make Task db-agnostic, so can test against testdb instead of real DB\r\n  // /!\\ this will inherently truncate all other tables linked with foreign keys\r\n  // testdb.none('truncate tasks restart identity cascade')\r\n})\r\n\r\ntest.before('Task.getAll should get all registered tasks', async t => {\r\n  try {\r\n    const expectedCount = await db.one('select count(id) from tasks', null, c => +c.count)\r\n    const data = await Task.getAll()\r\n    t.true(data.length === expectedCount)\r\n  } catch (error) {\r\n    console.error('Error Task.getAll', error)\r\n  }\r\n})\r\n\r\ntest('Task.get should get the first registered task', async t => {\r\n  try {\r\n    const expected = await db.one('select * from tasks where id=1')\r\n    const data = await Task.get(1)\r\n    t.true(\r\n      data.id === expected.id &&\r\n      data.content === expected.content &&\r\n      data.tag === expected.tag\r\n    )\r\n    /* t.is(data.created_at, expected.created_at)\r\n    t.is(data.finished_at, expected.finished_at)\r\n    t.is(data.deleted_at, expected.deleted_at) */\r\n  } catch (error) {\r\n    console.error('Error Task.get', error)\r\n  }\r\n})\r\n\r\ntest('Task.create should properly add a new task', async t => {\r\n  try {\r\n    const expected = 'test task'\r\n    // make Task.create return full Task fields instead of only id ?\r\n    const newID = await Task.create(expected).then(({id}) => id)\r\n    const addedTask = await Task.get(newID)\r\n    t.true(addedTask.content === expected)\r\n  } catch (error) {\r\n    console.error('Error Task.create', error)\r\n  }\r\n})\r\n\r\ntest('Task.update should properly update first task\\'s fields content, tag, and completed status', async t => {\r\n  try {\r\n    const firstTask = await Task.get(1)\r\n    const updatedTask = await Task.update(firstTask.id, 'edited content', 9, !firstTask.id.finishde_at)\r\n                                  .then(() => Task.get(firstTask.id)) // eslint-disable-line indent\r\n    t.true(\r\n      updatedTask.content === 'edited content' &&\r\n      updatedTask.tag === 9 &&\r\n      updatedTask.finished_at !== null\r\n    )\r\n  } catch (error) {\r\n    console.error('Error Task.update', error)\r\n  }\r\n})\r\n\r\ntest('Task.remove should remove the last registered task', async t => {\r\n  try {\r\n    // reminder: getAll query has condition 'where deleted_at is null', while get(id) doesnot\r\n    const allTasks = await Task.getAll()\r\n    const lastID = allTasks.length\r\n    const lastTask = await Task.remove(lastID)\r\n                               .then(() => Task.get(lastID)) // eslint-disable-line indent\r\n    t.false(lastTask.deleted_at === null)\r\n  } catch (error) {\r\n    console.error('Error Task.remove', error)\r\n  }\r\n})\r\n"]}