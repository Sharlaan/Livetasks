{"version":3,"sources":["../../src/models/Task.js"],"names":["Task","getAll","any","query","get","id","one","create","group_id","content","update","status","remove","none"],"mappings":";;;;;;AACA;;;;AACA;;;;AAEA;AAJA;AAKe,MAAMA,IAAN,CAAW;AACxB;;;;AAIA,SAAOC,MAAP,GAAiB;AACf,WAAO,mBAAGC,GAAH,CAAO,oBAAaD,MAAb,CAAoBE,KAA3B,CAAP;AACD;;AAED;;;;AAIA,SAAOC,GAAP,CAAYC,EAAZ,EAAgB;AACd,WAAO,mBAAGC,GAAH,CAAO,oBAAaF,GAAb,CAAiBD,KAAxB,EAA+B,CAACE,EAAD,CAA/B,CAAP;AACD;;AAED;;;;;;AAMA,SAAOE,MAAP,CAAeC,QAAf,EAAyBC,OAAzB,EAAkC;AAChC,WAAO,mBAAGH,GAAH,CAAO,oBAAaC,MAAb,CAAoBJ,KAA3B,EAAkC,CAACK,QAAD,EAAWC,OAAX,CAAlC,CAAP;AACD;;AAED;;;;;;;AAOA,SAAOC,MAAP,CAAeL,EAAf,EAAmBI,OAAnB,EAA4BE,MAA5B,EAAoC;AAClC,WAAO,mBAAGL,GAAH,CAAO,oBAAaI,MAAb,CAAoBP,KAA3B,EAAkC,CAACE,EAAD,EAAKI,OAAL,EAAcE,MAAd,CAAlC,CAAP;AACD;;AAED;;;;;AAKA,SAAOC,MAAP,CAAeP,EAAf,EAAmB;AACjB,WAAO,mBAAGQ,IAAH,CAAQ,oBAAaD,MAAb,CAAoBT,KAA5B,EAAmC,CAACE,EAAD,CAAnC,CAAP;AACD;AA7CuB;kBAALL,I","file":"Task.js","sourcesContent":["/* eslint-disable camelcase */\r\nimport db from '../config/database/database'\r\nimport { tasksQueries } from '../config/database/sqlQueries/index'\r\n\r\n// TODO: make db settable, so can use Tasks' methods with either testdb or db\r\nexport default class Task {\r\n  /**\r\n   * Retrieve all tasks\r\n   * @return {Promise} promise\r\n   */\r\n  static getAll () {\r\n    return db.any(tasksQueries.getAll.query)\r\n  }\r\n\r\n  /**\r\n   * Retrieve one particular task\r\n   * @return {Promise} promise\r\n   */\r\n  static get (id) {\r\n    return db.one(tasksQueries.get.query, [id])\r\n  }\r\n\r\n  /**\r\n   * Create a new task\r\n   * @param {number} group_id - ID of the group the task belongs to\r\n   * @param {string} content - Task's content\r\n   * @return {Promise} promise (id, group_id, content, created_at)\r\n   */\r\n  static create (group_id, content) {\r\n    return db.one(tasksQueries.create.query, [group_id, content])\r\n  }\r\n\r\n  /**\r\n   * Update task with the given identifier\r\n   * @param {number} id - Unique identifier\r\n   * @param {string} content - Name\r\n   * @param {boolean} status - True to set as finished, otherwise false\r\n   * @return {Promise} promise (id, group_id, content, created_at, finished_at)\r\n   */\r\n  static update (id, content, status) {\r\n    return db.one(tasksQueries.update.query, [id, content, status])\r\n  }\r\n\r\n  /**\r\n   * Remove the specified task\r\n   * @param {number} id - Task identifier\r\n   * @return {Promise} promise\r\n   */\r\n  static remove (id) {\r\n    return db.none(tasksQueries.remove.query, [id])\r\n  }\r\n}\r\n"]}