{"version":3,"sources":["../../../src/public/js/TaskGroup.js"],"names":["TaskGroup","id","name","baseApiUrl","socket","tasks","view","TaskGroupView","prototype","init","container","create","load","sort","a","b","af","Date","finished_at","bf","ac","created_at","bc","content","createTask","updateCompletion","countRemainingTasks","length","emit","JSON","stringify","groupId","status","message","data","console","error","log","onTaskCreated","updateTask","finished","onTaskUpdated","removeTask","onTaskRemoved","index","findIndex","task","index2insert","splice","deleted_at","find","reduce","total"],"mappings":"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","file":"TaskGroup.js","sourcesContent":["'use strict'\r\n/* eslint-disable camelcase */\r\n/**\r\n * Group constructor\r\n * @param {number} id - Group identifier\r\n * @param {string} name - Group Name\r\n * @param {string} baseApiUrl - URL for the API from which to fetch/send data\r\n * @param {Socket} socket - socket instance used for communicating with the API\r\n */\r\nfunction TaskGroup (id, name, baseApiUrl, socket) {\r\n  /**\r\n   * Identifier\r\n   * @type {number}\r\n   */\r\n  this.id = id\r\n\r\n  /**\r\n   * Name\r\n   * @type {string}\r\n   */\r\n  this.name = name\r\n\r\n  /**\r\n   * API url from which to fetch data\r\n   * @type {string}\r\n   */\r\n  this.baseApiUrl = baseApiUrl\r\n\r\n   /**\r\n    * @type {Socket}\r\n    */\r\n  this.socket = socket\r\n\r\n  /**\r\n   * Tasks\r\n   * @type {Array.<Object>}\r\n   */\r\n  this.tasks = []\r\n\r\n  /**\r\n   * The view\r\n   * @type {TaskGroupView}\r\n   */\r\n  this.view = new TaskGroupView(this) // eslint-disable-line no-undef\r\n}\r\n\r\n/**\r\n * Init\r\n * @param {DomElement} container - Container/Parent element\r\n * @return {boolean} True if everything was successful, otherwise false\r\n */\r\nTaskGroup.prototype.init = function (container) {\r\n  return this.view.create(container, this)\r\n}\r\n\r\n/**\r\n * Load tasks from an array\r\n * @param {Array.<Object>} tasks - The tasks\r\n */\r\nTaskGroup.prototype.load = function (tasks) {\r\n  // Sort tasks by finished_at then by created_at properties\r\n  // sort order: \"oldest has priority\"\r\n  tasks.sort(function (a, b) {\r\n    const af = new Date(a.finished_at)\r\n    const bf = new Date(b.finished_at)\r\n    const ac = new Date(a.created_at)\r\n    const bc = new Date(b.created_at)\r\n\r\n    if (af < bf) return -1\r\n    if (af > bf) return 1\r\n    if (ac < bc) return -1\r\n    if (ac > bc) return 1\r\n  })\r\n  // Load tasks\r\n  this.tasks = tasks\r\n  // Create views\r\n  for (let { id, content, finished_at } of tasks) {\r\n    this.view.createTask(id, content, (finished_at !== null))\r\n  }\r\n\r\n  // Update progression view\r\n  this.view.updateCompletion(this.countRemainingTasks(), this.tasks.length)\r\n}\r\n\r\n/**\r\n * Create a new task\r\n * @param {string} content - The content of the task\r\n */\r\nTaskGroup.prototype.createTask = function (content) {\r\n  this.socket.emit(\r\n    'createTask',\r\n    JSON.stringify({ groupId: this.id, content }),\r\n    ({status, message, data}) => {\r\n      if (status === 'failed') return console.error('Error with createTask fetch\\n', message)\r\n      console.log('createTask data', data)\r\n      // Add to the DOM\r\n      this.onTaskCreated(data)\r\n    }\r\n  )\r\n}\r\n\r\n/**\r\n * Update a task\r\n * @param {number} id - Task identifier\r\n * @param {string} content - The content of the task\r\n * @param {boolean} finished - True to set as finished, otherwise false\r\n */\r\nTaskGroup.prototype.updateTask = function (id, content, finished) {\r\n  // console.log('TaskGroup updateTask: Asking server for update (+ broadcast if successful)', {id, content, finished})\r\n  this.socket.emit(\r\n    'updateTask',\r\n    JSON.stringify({ id, content, finished }),\r\n    ({status, message, data}) => {\r\n      if (status === 'failed') return console.error('Error with updateTask fetch\\n', message)\r\n      // console.log('Server answered @ TaskGroup updateTask:', data)\r\n      this.onTaskUpdated(data) // Update the DOM element and its model\r\n    }\r\n  )\r\n}\r\n\r\n/**\r\n * Remove a given task\r\n * @param {number} id - Task identifier\r\n */\r\nTaskGroup.prototype.removeTask = function (id) {\r\n  this.socket.emit(\r\n    'removeTask',\r\n    JSON.stringify({ groupId: this.id, id }),\r\n    ({status, message}) => {\r\n      if (status === 'failed') return console.error('Error with removeTask fetch\\n', message)\r\n      // console.log'removeTask data', data)\r\n      this.onTaskRemoved(id) // Remove from the DOM\r\n    }\r\n  )\r\n}\r\n\r\n/**\r\n * Call when a task is created\r\n * @param {number} id - Task identifier\r\n * @param {string} content - The content of the task\r\n * @param {Date} created_at - Date of creation\r\n */\r\nTaskGroup.prototype.onTaskCreated = function ({ id, content, created_at }) {\r\n  // Give the sorting policy, the newly created task will be inserted\r\n  // at index before the first \"done\" task.\r\n  const index = this.tasks.findIndex(task => task.finished_at !== null)\r\n  const index2insert = index !== -1 ? index : (this.tasks.length - 1)\r\n  this.tasks.splice(\r\n    index2insert === 0 ? 0 : (index2insert - 1),\r\n    0,\r\n    {id, content, created_at, finished_at: null, deleted_at: null}\r\n  )\r\n  this.view.createTask(id, content, false, index2insert)\r\n  this.view.updateCompletion(this.countRemainingTasks(), this.tasks.length)\r\n}\r\n\r\n/**\r\n * Call when a task is updated\r\n * @param {number} id Task - identifier\r\n * @param {string} content - Task content\r\n * @param {string} finished_at - Completion date\r\n */\r\nTaskGroup.prototype.onTaskUpdated = function ({ id, content, finished_at }) {\r\n  // console.log'onTaskUpdated\\nfinished_at', finished_at, '\\ncontent', content)\r\n  // Update model\r\n  const task = this.tasks.find(task => task.id === id)\r\n  if (task) {\r\n    task.content = content\r\n    task.finished_at = finished_at\r\n  }\r\n\r\n  // Update view\r\n  this.view.updateTask(id, content, finished_at)\r\n  this.view.updateCompletion(this.countRemainingTasks(), this.tasks.length)\r\n}\r\n\r\n/**\r\n * Call when a task is removed\r\n * @param {number} id - Task identifier\r\n */\r\nTaskGroup.prototype.onTaskRemoved = function (id) {\r\n  // Remove model\r\n  const index = this.tasks.findIndex(task => task.id === +id)\r\n  if (index !== -1) this.tasks.splice(index, 1)\r\n\r\n  // Update view\r\n  this.view.removeTask(id)\r\n  this.view.updateCompletion(this.countRemainingTasks(), this.tasks.length)\r\n}\r\n\r\n/**\r\n * Count un-completed tasks\r\n * @return {number} - A positive integer\r\n */\r\nTaskGroup.prototype.countRemainingTasks = function () {\r\n  return this.tasks.reduce((total, task) => {\r\n    return total += task.finished_at === null ? 1 : 0 // eslint-disable-line no-return-assign\r\n  }, 0)\r\n}\r\n"]}