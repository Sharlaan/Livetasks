{"version":3,"sources":["../../../src/public/js/App.js"],"names":["App","API_URL","API_PORT","baseApiUrl","container","socket","groups","prototype","init","document","getElementById","io","connect","load","emit","status","message","data","console","error","initialGroupID","taskGroup","TaskGroup","on","warn","group","group_id","onTaskCreated","onTaskUpdated","groupId","onTaskRemoved","id"],"mappings":"AAAA;;AAEA,SAASA,GAAT,GAAgB;AACd;;;;AAIA;AACA,OAAKC,OAAL,GAAe,WAAf;;AAEA;;;;AAIA,OAAKC,QAAL,GAAgB,IAAhB;;AAEA,OAAKC,UAAL,eAA4B,KAAKF,OAAjC,SAA4C,KAAKC,QAAjD;;AAEA;;;;AAIA,OAAKE,SAAL,GAAiB,IAAjB;;AAEA;;;AAGA,OAAKC,MAAL,GAAc,IAAd;;AAEA;;;;AAIA;AACA,OAAKC,MAAL,GAAc,EAAd;AACD;;AAED;;;AAGAN,IAAIO,SAAJ,CAAcC,IAAd,GAAqB,YAAY;AAC/B,OAAKJ,SAAL,GAAiBK,SAASC,cAAT,CAAwB,MAAxB,CAAjB;AACA,OAAKL,MAAL,GAAcM,GAAGC,OAAH,CAAW,KAAKT,UAAhB,CAAd,CAF+B,CAEW;AAC3C,CAHD;;AAKA;;;AAGAH,IAAIO,SAAJ,CAAcM,IAAd,GAAqB,YAAY;AAAA;;AAC/B;AACA,OAAKR,MAAL,CAAYS,IAAZ,CACE,aADF,EAEE,IAFF,EAGE,gBAA6B;AAAA,QAA3BC,MAA2B,QAA3BA,MAA2B;AAAA,QAAnBC,OAAmB,QAAnBA,OAAmB;AAAA,QAAVC,IAAU,QAAVA,IAAU;;AAC3B,QAAIF,WAAW,QAAf,EAAyB,OAAOG,QAAQC,KAAR,CAAc,gCAAd,EAAgDH,OAAhD,CAAP;AACzB;AACA,QAAMI,iBAAiB,CAAvB;AACA,QAAMC,YAAY,IAAIC,SAAJ,CAAcF,cAAd,EAA8B,UAA9B,EAA0C,MAAKjB,UAA/C,EAA2D,MAAKE,MAAhE,CAAlB,CAJ2B,CAI+D;AAC1F,QAAIgB,UAAUb,IAAV,CAAe,MAAKJ,SAApB,CAAJ,EAAoCiB,UAAUR,IAAV,CAAeI,IAAf;AACpC,UAAKX,MAAL,CAAYc,cAAZ,IAA8BC,SAA9B;AACD,GAVH;;AAaA;AACA,OAAKhB,MAAL,CAAYkB,EAAZ,CAAe,WAAf,EAA4B,YAAM;AAChCL,YAAQM,IAAR,CAAa,sBAAb;AACD,GAFD;AAGA,OAAKnB,MAAL,CAAYkB,EAAZ,CAAe,eAAf,EAAgC,gBAAQ;AACtCL,YAAQM,IAAR,CAAa,4CAAb,EAA2DP,IAA3D;AACA,QAAMQ,QAAQ,MAAKnB,MAAL,CAAYW,KAAKS,QAAjB,CAAd;AACAD,UAAME,aAAN,CAAoBV,IAApB;AACD,GAJD;AAKA,OAAKZ,MAAL,CAAYkB,EAAZ,CAAe,eAAf,EAAgC,gBAAQ;AACtCL,YAAQM,IAAR,CAAa,4CAAb,EAA2DP,IAA3D;AACA,QAAMQ,QAAQ,MAAKnB,MAAL,CAAYW,KAAKS,QAAjB,CAAd;AACAD,UAAMG,aAAN,CAAoBX,IAApB;AACD,GAJD;AAKA,OAAKZ,MAAL,CAAYkB,EAAZ,CAAe,eAAf,EAAgC,gBAAQ;AACtCL,YAAQM,IAAR,CAAa,4CAAb,EAA2DP,IAA3D;AACA,QAAMQ,QAAQ,MAAKnB,MAAL,CAAYW,KAAKY,OAAjB,CAAd;AACAJ,UAAMK,aAAN,CAAoBb,KAAKc,EAAzB;AACD,GAJD;AAKD,CAlCD","file":"App.js","sourcesContent":["'use strict'\r\n\r\nfunction App () {\r\n  /**\r\n   * Set API and Socket URLs\r\n   * @type {String}\r\n   */\r\n  // this.CLIENT_URL = 'localhost'\r\n  this.API_URL = 'localhost'\r\n\r\n  /**\r\n   * Set API and Socket ports\r\n   * @type {Number}\r\n   */\r\n  this.API_PORT = 3210\r\n\r\n  this.baseApiUrl = `http://${this.API_URL}:${this.API_PORT}`\r\n\r\n  /**\r\n   * Application container\r\n   * @type {DomElement}\r\n   */\r\n  this.container = null\r\n\r\n  /**\r\n   * @type {Socket}\r\n   */\r\n  this.socket = null\r\n\r\n  /**\r\n   * Array of TaskGroup\r\n   * @type {Array.<TaskGroup>}\r\n   */\r\n  // TODO: Add some 'general' group at index 0\r\n  this.groups = []\r\n}\r\n\r\n/**\r\n * Init application: link to the dom and prepare data\r\n */\r\nApp.prototype.init = function () {\r\n  this.container = document.getElementById('root')\r\n  this.socket = io.connect(this.baseApiUrl) // eslint-disable-line no-undef\r\n}\r\n\r\n/**\r\n * Load group of tasks\r\n */\r\nApp.prototype.load = function () {\r\n  // Load group of tasks\r\n  this.socket.emit(\r\n    'getAllTasks',\r\n    null,\r\n    ({status, message, data}) => {\r\n      if (status === 'failed') return console.error('Error with getAllTasks fetch\\n', message)\r\n      // Assume one group of task for now. Next feature: allow multiple groups\r\n      const initialGroupID = 1\r\n      const taskGroup = new TaskGroup(initialGroupID, 'My tasks', this.baseApiUrl, this.socket) // eslint-disable-line no-undef\r\n      if (taskGroup.init(this.container)) taskGroup.load(data)\r\n      this.groups[initialGroupID] = taskGroup\r\n    }\r\n  )\r\n\r\n  // Listen to broadcasted tasks events\r\n  this.socket.on('onConnect', () => {\r\n    console.warn('New client connected')\r\n  })\r\n  this.socket.on('onTaskCreated', data => {\r\n    console.warn('Received broadcasted event onTaskCreated\\n', data)\r\n    const group = this.groups[data.group_id]\r\n    group.onTaskCreated(data)\r\n  })\r\n  this.socket.on('onTaskUpdated', data => {\r\n    console.warn('Received broadcasted event onTaskUpdated\\n', data)\r\n    const group = this.groups[data.group_id]\r\n    group.onTaskUpdated(data)\r\n  })\r\n  this.socket.on('onTaskRemoved', data => {\r\n    console.warn('Received broadcasted event onTaskRemoved\\n', data)\r\n    const group = this.groups[data.groupId]\r\n    group.onTaskRemoved(data.id)\r\n  })\r\n}\r\n"]}