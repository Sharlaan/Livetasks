{"version":3,"sources":["../../../src/public/js/TaskGroupView.js"],"names":["TaskGroupView","model","container","completionContainer","taskContainer","prototype","create","mainDiv","document","createElement","className","headerDiv","groupTitle","textContent","appendChild","completionDiv","title","actionsMenuButton","innerHTML","addEventListener","menu","children","style","visibility","opacity","event","key","contains","relatedTarget","actionsMenu","stopPropagation","currentTarget","target","classList","createTask","taskList","id","content","status","justCreated","task","dataset","ct","checkbox","firstChild","value","newChecked","JSON","parse","checked","updateTask","statusCheckbox","add","contentInput","type","currentContent","readOnly","length","placeholder","isEditing","parentElement","newContent","console","log","blur","actionsBox","editButton","focus","removeButton","confirmation","confirm","removeTask","insertBefore","getElementsByClassName","click","finished_at","getElementById","remove","removeChild","updateCompletion","taskRemainingCount","taskCount","Number","isFinite","toFixed"],"mappings":"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","file":"TaskGroupView.js","sourcesContent":["'use strict'\r\n/* eslint-disable camelcase */\r\n/**\r\n * Constructor\r\n * @param {TaskGroup} model - Linked model\r\n */\r\nfunction TaskGroupView (model) {\r\n  /**\r\n   * Container\r\n   * @type {DOMElement}\r\n   */\r\n  this.container = null\r\n\r\n  /**\r\n   * Linked model\r\n   * @type {TaskGroup}\r\n   */\r\n  this.model = model\r\n\r\n  /**\r\n   * Completion container to show task finished\r\n   * @type {DOMElement}\r\n   */\r\n  this.completionContainer = null\r\n\r\n  /**\r\n   * Task container\r\n   * @type {DOMElement}\r\n   */\r\n  this.taskContainer = null\r\n}\r\n\r\n/**\r\n * Create a new group of task\r\n * @param {DOMElement} container - Parent element\r\n * @return {boolean} True if everything was successful\r\n */\r\nTaskGroupView.prototype.create = function (container) {\r\n  let mainDiv = document.createElement('div')\r\n  mainDiv.className = 'task-container'\r\n  this.container = mainDiv\r\n\r\n  // Header div\r\n  const headerDiv = document.createElement('header')\r\n  headerDiv.className = 'task-group-header'\r\n\r\n  let groupTitle = document.createElement('h3')\r\n  groupTitle.className = 'task-group-title'\r\n  groupTitle.textContent = 'Project 1' // TODO: link this to group name from DB\r\n  headerDiv.appendChild(groupTitle)\r\n\r\n  let completionDiv = document.createElement('div')\r\n  completionDiv.className = 'completionDiv'\r\n  completionDiv.title = 'Remaining tasks'\r\n  headerDiv.appendChild(completionDiv)\r\n  this.completionContainer = completionDiv\r\n\r\n  let actionsMenuButton = document.createElement('button')\r\n  actionsMenuButton.innerHTML = '<i class=\"material-icons\">more_vert</i>'\r\n  actionsMenuButton.className = 'actionsMenuButton'\r\n  actionsMenuButton.addEventListener('click', function () {\r\n    const menu = this.children[1]\r\n    menu.style.visibility = 'visible' // make this as class 'showMenu' ?\r\n    menu.style.opacity = 1\r\n  })\r\n  actionsMenuButton.addEventListener('keyup', function (event) {\r\n    const menu = this.children[1]\r\n    if (event.key === 'Escape') {\r\n      menu.style.visibility = 'hidden' // make this as class 'closeMenu' ?\r\n      menu.style.opacity = 0\r\n    }\r\n  })\r\n  actionsMenuButton.addEventListener('blur', function (event) {\r\n    const menu = this.children[1]\r\n    if (!this.contains(event.relatedTarget)) {\r\n      menu.style.visibility = 'hidden' // make this as class 'closeMenu' ?\r\n      menu.style.opacity = 0\r\n    }\r\n  })\r\n  headerDiv.appendChild(actionsMenuButton)\r\n\r\n  let actionsMenu = document.createElement('div')\r\n  actionsMenu.innerHTML = `\r\n    <button class='create-group'>\r\n      <i class='material-icons'>playlist_add</i>\r\n      Create new group of tasks<br/>(un-implemented)\r\n    </button></li>\r\n    <button class='edit-group-title'>\r\n      <i class='material-icons'>input</i>\r\n      Edit this group's title<br/>(un-implemented)\r\n    </button>\r\n    <button class='add-new-task'>\r\n      <i class='material-icons'>add</i>\r\n      Add new task\r\n    </button>`\r\n  actionsMenu.className = 'actionsMenu'\r\n  actionsMenu.addEventListener('click', event => {\r\n    event.stopPropagation()\r\n    event.currentTarget.style.visibility = 'hidden' // make this as class 'closeMenu' ?\r\n    event.currentTarget.style.opacity = 0\r\n\r\n    if (event.target.classList.contains('add-new-task')) this.model.createTask('')\r\n  })\r\n  actionsMenuButton.appendChild(actionsMenu)\r\n\r\n  // TODO: Add input for edition of group title\r\n  // TODO: create new group button\r\n\r\n  mainDiv.appendChild(headerDiv)\r\n\r\n  // Task list\r\n  const taskList = document.createElement('ul')\r\n  taskList.className = 'task-list'\r\n  mainDiv.appendChild(taskList)\r\n  this.taskContainer = taskList\r\n\r\n  // Finally add to the DOM\r\n  container.appendChild(mainDiv)\r\n\r\n  return true\r\n}\r\n\r\n/**\r\n * Create a new task\r\n * @param {number} id - The task identifier\r\n * @param {string} content - The content of the task\r\n * @param {boolean} status - True to set as completed\r\n * @param {boolean} justCreated - flag to give focus on the content input after task creation\r\n */\r\nTaskGroupView.prototype.createTask = function (id, content, status, justCreated = false) {\r\n  let task = document.createElement('li')\r\n  task.className = 'task'\r\n  task.id = `task-${id}`\r\n  task.dataset.id = id\r\n  // TODO: see if the handler can be generic'ed\r\n  task.addEventListener('click', ({currentTarget: ct}) => {\r\n    // use e.currentTarget to be sure to use the attached node instead of e.target which can be some child\r\n    // use e.currentTarget when in lexical mode (arrow function), or this in normal function(event) mode\r\n    const checkbox = ct.firstChild\r\n    const id = ct.dataset.id\r\n    const content = ct.children[1].value\r\n    const newChecked = !JSON.parse(checkbox.dataset.checked) // /!\\ data-* value is always a string\r\n    // console.log('Event triggered @ TaskGroupView createTask: newChecked', checkbox)\r\n    this.model.updateTask(id, content, newChecked)\r\n  })\r\n\r\n  let statusCheckbox = document.createElement('div')\r\n  statusCheckbox.className = 'statusCheckbox'\r\n  statusCheckbox.dataset.checked = status\r\n  // TODO: use 'done_all' to check/uncheck all tasks at once\r\n  statusCheckbox.innerHTML = '<i class=\"material-icons\">done</i>'\r\n  if (!status) statusCheckbox.classList.add('hide')\r\n  /* ou\r\n   `<i class='material-icons'>\r\n      ${status ? 'check_box' : 'check_box_outline_blank'}\r\n    </i>` */\r\n  task.appendChild(statusCheckbox)\r\n\r\n  let contentInput = document.createElement('input')\r\n  contentInput.type = 'text'\r\n  contentInput.dataset.currentContent = content\r\n  contentInput.value = content\r\n  contentInput.readOnly = true\r\n  contentInput.className = 'taskContent'\r\n  if (!content.length) contentInput.placeholder = 'Write a task ...'\r\n  if (status) contentInput.classList.add('strike')\r\n  // Prevent triggering task.click() event, only when editing (bubbling propagation)\r\n  contentInput.addEventListener('click', function (event) {\r\n    const isEditing = !this.readOnly\r\n    if (isEditing) event.stopPropagation()\r\n  })\r\n  // Save previous value before editing\r\n  contentInput.addEventListener('focus', function () {\r\n    const isEditing = !this.readOnly\r\n    if (isEditing) this.dataset.currentContent = this.value\r\n  })\r\n  contentInput.addEventListener('blur', (event) => {\r\n    const {currentTarget: ct} = event\r\n    ct.readOnly = true\r\n    const task = ct.parentElement\r\n    const currentContent = ct.dataset.currentContent\r\n    const checkbox = task.firstChild\r\n    const id = task.dataset.id\r\n    const newContent = ct.value\r\n    const checked = JSON.parse(checkbox.dataset.checked) // /!\\ data-* value is always a string\r\n    // Prevent useless server call and overwrite value with old value\r\n    console.log(event)\r\n    if (event.key === 'Escape') {\r\n      ct.value = currentContent\r\n      return false\r\n    }\r\n    // Prevent useless server call\r\n    if (newContent !== currentContent) {\r\n      // console.log('Event triggered @ TaskGroupView createTask: newContent', newContent)\r\n      this.model.updateTask(id, newContent, checked)\r\n    }\r\n  })\r\n  contentInput.addEventListener('keyup', function (event) {\r\n    switch (event.key) {\r\n      case 'Escape':\r\n        this.blur(true) // Triggers event defined above\r\n        break\r\n      case 'Enter':\r\n        this.blur()\r\n        break\r\n      default: break\r\n    }\r\n  })\r\n  task.appendChild(contentInput)\r\n\r\n  let actionsBox = document.createElement('div')\r\n  actionsBox.className = 'actionsBox'\r\n  task.appendChild(actionsBox)\r\n\r\n  let editButton = document.createElement('button')\r\n  editButton.innerHTML = '<i class=\"material-icons edit\">mode_edit</i>' // or 'input'\r\n  editButton.title = 'Edit'\r\n  editButton.addEventListener('click', event => {\r\n    event.stopPropagation() // necessary to prevent triggering task.click() by bubbling\r\n    const task = event.currentTarget.parentElement.parentElement\r\n    const contentInput = task.children[1]\r\n    contentInput.readOnly = false\r\n    contentInput.focus()\r\n  })\r\n  actionsBox.appendChild(editButton)\r\n\r\n  let removeButton = document.createElement('button')\r\n  removeButton.innerHTML = '<i class=\"material-icons remove\">clear</i>'\r\n  removeButton.title = 'Delete'\r\n  removeButton.addEventListener('click', event => {\r\n    event.stopPropagation()\r\n    const confirmation = confirm('Are you sure to delete this task ?') // eslint-disable-line no-undef\r\n    const task = event.currentTarget.parentElement.parentElement\r\n    if (confirmation) this.model.removeTask(task.dataset.id)\r\n  })\r\n  actionsBox.appendChild(removeButton)\r\n\r\n  this.taskContainer.insertBefore(task, this.taskContainer.firstChild)\r\n  // Give focus to the content input for the user-created task\r\n  if (justCreated) task.getElementsByClassName('edit').click()\r\n}\r\n\r\n/**\r\n * Update a task\r\n * @param {number} id - The task identifier\r\n * @param {string} content - Task content\r\n * @param {string} finished_at - Completion date\r\n */\r\nTaskGroupView.prototype.updateTask = function (id, content, finished_at) {\r\n  let task = document.getElementById(`task-${id}`)\r\n  if (!task) return\r\n  const statusCheckbox = task.firstChild\r\n  const contentInput = task.children[1]\r\n  const status = (finished_at !== null)\r\n  statusCheckbox.dataset.checked = status\r\n  if (status) {\r\n    statusCheckbox.classList.remove('hide')\r\n    contentInput.classList.add('strike')\r\n  } else {\r\n    statusCheckbox.classList.add('hide')\r\n    contentInput.classList.remove('strike')\r\n  }\r\n  contentInput.value = content\r\n}\r\n\r\n/**\r\n * Remove a task\r\n * @param {number} id - The task identifier\r\n */\r\nTaskGroupView.prototype.removeTask = function (id) {\r\n  const task = document.getElementById(`task-${id}`)\r\n  if (!task) return\r\n\r\n  this.taskContainer.removeChild(task)\r\n}\r\n\r\n/**\r\n * Update completion indicator\r\n * @param {number} taskRemainingCount - Amount of uncompleted task(s)\r\n * @param {number} taskCount - Task count\r\n */\r\nTaskGroupView.prototype.updateCompletion = function (taskRemainingCount, taskCount) {\r\n  this.completionContainer.innerHTML = `${taskRemainingCount} / ${taskCount}`\r\n  if (Number.isFinite(taskCount)) this.completionContainer.title = // eslint-disable-line curly\r\n    `Remaining tasks\r\n(completion ${(((taskCount - taskRemainingCount) / taskCount) * 100).toFixed(1)} %)`\r\n}\r\n"]}